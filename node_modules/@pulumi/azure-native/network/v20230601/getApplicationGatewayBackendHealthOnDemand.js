"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApplicationGatewayBackendHealthOnDemandOutput = exports.getApplicationGatewayBackendHealthOnDemand = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Gets the backend health for given combination of backend pool and http setting of the specified application gateway in a resource group.
 */
function getApplicationGatewayBackendHealthOnDemand(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure-native:network/v20230601:getApplicationGatewayBackendHealthOnDemand", {
        "applicationGatewayName": args.applicationGatewayName,
        "backendAddressPool": args.backendAddressPool,
        "backendHttpSettings": args.backendHttpSettings,
        "expand": args.expand,
        "host": args.host,
        "match": args.match,
        "path": args.path,
        "pickHostNameFromBackendHttpSettings": args.pickHostNameFromBackendHttpSettings,
        "protocol": args.protocol,
        "resourceGroupName": args.resourceGroupName,
        "timeout": args.timeout,
    }, opts);
}
exports.getApplicationGatewayBackendHealthOnDemand = getApplicationGatewayBackendHealthOnDemand;
/**
 * Gets the backend health for given combination of backend pool and http setting of the specified application gateway in a resource group.
 */
function getApplicationGatewayBackendHealthOnDemandOutput(args, opts) {
    return pulumi.output(args).apply((a) => getApplicationGatewayBackendHealthOnDemand(a, opts));
}
exports.getApplicationGatewayBackendHealthOnDemandOutput = getApplicationGatewayBackendHealthOnDemandOutput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0QXBwbGljYXRpb25HYXRld2F5QmFja2VuZEhlYWx0aE9uRGVtYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbmV0d29yay92MjAyMzA2MDEvZ2V0QXBwbGljYXRpb25HYXRld2F5QmFja2VuZEhlYWx0aE9uRGVtYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzRUFBc0U7QUFDdEUsaUZBQWlGOzs7QUFFakYseUNBQXlDO0FBSXpDLDZDQUE2QztBQUU3Qzs7R0FFRztBQUNILFNBQWdCLDBDQUEwQyxDQUFDLElBQW9ELEVBQUUsSUFBMkI7SUFFeEksSUFBSSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLG9CQUFvQixFQUFFLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3pFLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsMkVBQTJFLEVBQUU7UUFDdEcsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLHNCQUFzQjtRQUNyRCxvQkFBb0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCO1FBQzdDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxtQkFBbUI7UUFDL0MsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNO1FBQ3JCLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSTtRQUNqQixPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUs7UUFDbkIsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJO1FBQ2pCLHFDQUFxQyxFQUFFLElBQUksQ0FBQyxtQ0FBbUM7UUFDL0UsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRO1FBQ3pCLG1CQUFtQixFQUFFLElBQUksQ0FBQyxpQkFBaUI7UUFDM0MsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPO0tBQzFCLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDYixDQUFDO0FBaEJELGdHQWdCQztBQThERDs7R0FFRztBQUNILFNBQWdCLGdEQUFnRCxDQUFDLElBQTBELEVBQUUsSUFBMkI7SUFDcEosT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsMENBQTBDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDckcsQ0FBQztBQUZELDRHQUVDIn0=