"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Roles = exports.RecommendationType = exports.RecommendationConfigStatus = exports.Protocol = exports.PropertyType = exports.PricingTier = exports.OrganizationMembershipType = exports.Operator = exports.OfferingType = exports.MinimalSeverity = exports.IsEnabled = exports.ImplementationEffort = exports.GovernanceRuleType = exports.GovernanceRuleSourceResourceType = exports.GovernanceRuleOwnerSourceType = exports.ExportData = exports.EventSource = exports.EnvironmentType = exports.Enforce = exports.DevOpsProvisioningState = exports.DataSource = exports.CloudName = exports.Categories = exports.AutoProvision = exports.AutoDiscovery = exports.AuthenticationType = exports.AssessmentType = exports.AssessmentStatusCode = exports.ApplicationSourceResourceType = exports.AdditionalWorkspaceType = exports.AdditionalWorkspaceDataType = exports.ActionType = exports.v20240401 = exports.v20240301preview = exports.v20240101 = exports.v20231201preview = exports.v20231001preview = exports.v20230901preview = exports.v20230501 = exports.v20230301preview = exports.v20220701preview = exports.v20220101preview = exports.v20210801preview = exports.v20210701preview = exports.v20210601 = exports.v20200101preview = exports.v20200101 = exports.v20190801 = exports.v20190101preview = exports.v20170801preview = void 0;
exports.UserImpact = exports.UnmaskedIpLoggingStatus = exports.Type = exports.Threats = exports.Techniques = exports.Tactics = exports.SupportedCloudEnum = exports.SubPlan = exports.StatusReason = exports.Status = exports.State = exports.StandardSupportedClouds = exports.Source = exports.SeverityEnum = exports.Severity = exports.ServerVulnerabilityAssessmentsSettingKind = exports.ServerVulnerabilityAssessmentsAzureSettingSelectedProvider = exports.SecuritySolutionStatus = exports.ScanningMode = exports.RuleState = void 0;
// Export sub-modules:
const v20170801preview = require("./v20170801preview");
exports.v20170801preview = v20170801preview;
const v20190101preview = require("./v20190101preview");
exports.v20190101preview = v20190101preview;
const v20190801 = require("./v20190801");
exports.v20190801 = v20190801;
const v20200101 = require("./v20200101");
exports.v20200101 = v20200101;
const v20200101preview = require("./v20200101preview");
exports.v20200101preview = v20200101preview;
const v20210601 = require("./v20210601");
exports.v20210601 = v20210601;
const v20210701preview = require("./v20210701preview");
exports.v20210701preview = v20210701preview;
const v20210801preview = require("./v20210801preview");
exports.v20210801preview = v20210801preview;
const v20220101preview = require("./v20220101preview");
exports.v20220101preview = v20220101preview;
const v20220701preview = require("./v20220701preview");
exports.v20220701preview = v20220701preview;
const v20230301preview = require("./v20230301preview");
exports.v20230301preview = v20230301preview;
const v20230501 = require("./v20230501");
exports.v20230501 = v20230501;
const v20230901preview = require("./v20230901preview");
exports.v20230901preview = v20230901preview;
const v20231001preview = require("./v20231001preview");
exports.v20231001preview = v20231001preview;
const v20231201preview = require("./v20231201preview");
exports.v20231201preview = v20231201preview;
const v20240101 = require("./v20240101");
exports.v20240101 = v20240101;
const v20240301preview = require("./v20240301preview");
exports.v20240301preview = v20240301preview;
const v20240401 = require("./v20240401");
exports.v20240401 = v20240401;
exports.ActionType = {
    LogicApp: "LogicApp",
    EventHub: "EventHub",
    Workspace: "Workspace",
};
exports.AdditionalWorkspaceDataType = {
    Alerts: "Alerts",
    RawEvents: "RawEvents",
};
exports.AdditionalWorkspaceType = {
    Sentinel: "Sentinel",
};
exports.ApplicationSourceResourceType = {
    /**
     * The source of the application is assessments
     */
    Assessments: "Assessments",
};
exports.AssessmentStatusCode = {
    /**
     * The resource is healthy
     */
    Healthy: "Healthy",
    /**
     * The resource has a security issue that needs to be addressed
     */
    Unhealthy: "Unhealthy",
    /**
     * Assessment for this resource did not happen
     */
    NotApplicable: "NotApplicable",
};
exports.AssessmentType = {
    /**
     * Microsoft Defender for Cloud managed assessments
     */
    BuiltIn: "BuiltIn",
    /**
     * User defined policies that are automatically ingested from Azure Policy to Microsoft Defender for Cloud
     */
    CustomPolicy: "CustomPolicy",
    /**
     * User assessments pushed directly by the user or other third party to Microsoft Defender for Cloud
     */
    CustomerManaged: "CustomerManaged",
};
exports.AuthenticationType = {
    /**
     * AWS cloud account connector user credentials authentication
     */
    AwsCreds: "awsCreds",
    /**
     * AWS account connector assume role authentication
     */
    AwsAssumeRole: "awsAssumeRole",
    /**
     * GCP account connector service to service authentication
     */
    GcpCredentials: "gcpCredentials",
};
exports.AutoDiscovery = {
    Disabled: "Disabled",
    Enabled: "Enabled",
    NotApplicable: "NotApplicable",
};
exports.AutoProvision = {
    /**
     * Install missing Azure Arc agents on machines automatically
     */
    On: "On",
    /**
     * Do not install Azure Arc agent on the machines automatically
     */
    Off: "Off",
};
exports.Categories = {
    Compute: "Compute",
    Networking: "Networking",
    Data: "Data",
    IdentityAndAccess: "IdentityAndAccess",
    IoT: "IoT",
};
exports.CloudName = {
    Azure: "Azure",
    AWS: "AWS",
    GCP: "GCP",
    Github: "Github",
    AzureDevOps: "AzureDevOps",
    GitLab: "GitLab",
};
exports.DataSource = {
    /**
     * Devices twin data
     */
    TwinData: "TwinData",
};
exports.DevOpsProvisioningState = {
    Succeeded: "Succeeded",
    Failed: "Failed",
    Canceled: "Canceled",
    Pending: "Pending",
    PendingDeletion: "PendingDeletion",
    DeletionSuccess: "DeletionSuccess",
    DeletionFailure: "DeletionFailure",
};
exports.Enforce = {
    /**
     * Allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False")
     */
    False: "False",
    /**
     * Prevents overrides and forces the current scope's pricing configuration to all descendants
     */
    True: "True",
};
exports.EnvironmentType = {
    AwsAccount: "AwsAccount",
    GcpProject: "GcpProject",
    GithubScope: "GithubScope",
    AzureDevOpsScope: "AzureDevOpsScope",
    GitlabScope: "GitlabScope",
};
exports.EventSource = {
    Assessments: "Assessments",
    AssessmentsSnapshot: "AssessmentsSnapshot",
    SubAssessments: "SubAssessments",
    SubAssessmentsSnapshot: "SubAssessmentsSnapshot",
    Alerts: "Alerts",
    SecureScores: "SecureScores",
    SecureScoresSnapshot: "SecureScoresSnapshot",
    SecureScoreControls: "SecureScoreControls",
    SecureScoreControlsSnapshot: "SecureScoreControlsSnapshot",
    RegulatoryComplianceAssessment: "RegulatoryComplianceAssessment",
    RegulatoryComplianceAssessmentSnapshot: "RegulatoryComplianceAssessmentSnapshot",
};
exports.ExportData = {
    /**
     * Agent raw events
     */
    RawEvents: "RawEvents",
};
exports.GovernanceRuleOwnerSourceType = {
    /**
     * The rule source type defined using resource tag
     */
    ByTag: "ByTag",
    /**
     * The rule source type defined manually
     */
    Manually: "Manually",
};
exports.GovernanceRuleSourceResourceType = {
    /**
     * The source of the governance rule is assessments
     */
    Assessments: "Assessments",
};
exports.GovernanceRuleType = {
    /**
     * The source of the rule type definition is integrated
     */
    Integrated: "Integrated",
    /**
     * The source of the rule type definition is ServiceNow
     */
    ServiceNow: "ServiceNow",
};
exports.ImplementationEffort = {
    Low: "Low",
    Moderate: "Moderate",
    High: "High",
};
exports.IsEnabled = {
    /**
     * Indicates the extension is enabled
     */
    True: "True",
    /**
     * Indicates the extension is disabled
     */
    False: "False",
};
exports.MinimalSeverity = {
    /**
     * Get notifications on new alerts with High severity
     */
    High: "High",
    /**
     * Get notifications on new alerts with medium or high severity
     */
    Medium: "Medium",
    /**
     * Don't get notifications on new alerts with low, medium or high severity
     */
    Low: "Low",
};
exports.OfferingType = {
    CspmMonitorAws: "CspmMonitorAws",
    DefenderForContainersAws: "DefenderForContainersAws",
    DefenderForServersAws: "DefenderForServersAws",
    DefenderForDatabasesAws: "DefenderForDatabasesAws",
    InformationProtectionAws: "InformationProtectionAws",
    CspmMonitorGcp: "CspmMonitorGcp",
    CspmMonitorGithub: "CspmMonitorGithub",
    CspmMonitorAzureDevOps: "CspmMonitorAzureDevOps",
    DefenderForServersGcp: "DefenderForServersGcp",
    DefenderForContainersGcp: "DefenderForContainersGcp",
    DefenderForDatabasesGcp: "DefenderForDatabasesGcp",
    DefenderCspmAws: "DefenderCspmAws",
    DefenderCspmGcp: "DefenderCspmGcp",
    DefenderForDevOpsGithub: "DefenderForDevOpsGithub",
    DefenderForDevOpsAzureDevOps: "DefenderForDevOpsAzureDevOps",
    CspmMonitorGitLab: "CspmMonitorGitLab",
    DefenderForDevOpsGitLab: "DefenderForDevOpsGitLab",
};
exports.Operator = {
    /**
     * Applies for decimal and non-decimal operands
     */
    Equals: "Equals",
    /**
     * Applies only for decimal operands
     */
    GreaterThan: "GreaterThan",
    /**
     * Applies only for decimal operands
     */
    GreaterThanOrEqualTo: "GreaterThanOrEqualTo",
    /**
     * Applies only for decimal operands
     */
    LesserThan: "LesserThan",
    /**
     * Applies only for decimal operands
     */
    LesserThanOrEqualTo: "LesserThanOrEqualTo",
    /**
     * Applies  for decimal and non-decimal operands
     */
    NotEquals: "NotEquals",
    /**
     * Applies only for non-decimal operands
     */
    Contains: "Contains",
    /**
     * Applies only for non-decimal operands
     */
    StartsWith: "StartsWith",
    /**
     * Applies only for non-decimal operands
     */
    EndsWith: "EndsWith",
};
exports.OrganizationMembershipType = {
    Member: "Member",
    Organization: "Organization",
};
exports.PricingTier = {
    /**
     * Get free Microsoft Defender for Cloud experience with basic security features
     */
    Free: "Free",
    /**
     * Get the standard Microsoft Defender for Cloud experience with advanced security features
     */
    Standard: "Standard",
};
exports.PropertyType = {
    String: "String",
    Integer: "Integer",
    Number: "Number",
    Boolean: "Boolean",
};
exports.Protocol = {
    TCP: "TCP",
    UDP: "UDP",
    All: "*",
};
exports.RecommendationConfigStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.RecommendationType = {
    /**
     * Authentication schema used for pull an edge module from an ACR repository does not use Service Principal Authentication.
     */
    IoT_ACRAuthentication: "IoT_ACRAuthentication",
    /**
     * IoT agent message size capacity is currently underutilized, causing an increase in the number of sent messages. Adjust message intervals for better utilization.
     */
    IoT_AgentSendsUnutilizedMessages: "IoT_AgentSendsUnutilizedMessages",
    /**
     * Identified security related system configuration issues.
     */
    IoT_Baseline: "IoT_Baseline",
    /**
     * You can optimize Edge Hub memory usage by turning off protocol heads for any protocols not used by Edge modules in your solution.
     */
    IoT_EdgeHubMemOptimize: "IoT_EdgeHubMemOptimize",
    /**
     * Logging is disabled for this edge module.
     */
    IoT_EdgeLoggingOptions: "IoT_EdgeLoggingOptions",
    /**
     * A minority within a device security group has inconsistent Edge Module settings with the rest of their group.
     */
    IoT_InconsistentModuleSettings: "IoT_InconsistentModuleSettings",
    /**
     * Install the Azure Security of Things Agent.
     */
    IoT_InstallAgent: "IoT_InstallAgent",
    /**
     * IP Filter Configuration should have rules defined for allowed traffic and should deny all other traffic by default.
     */
    IoT_IPFilter_DenyAll: "IoT_IPFilter_DenyAll",
    /**
     * An Allow IP Filter rules source IP range is too large. Overly permissive rules might expose your IoT hub to malicious intenders.
     */
    IoT_IPFilter_PermissiveRule: "IoT_IPFilter_PermissiveRule",
    /**
     * A listening endpoint was found on the device.
     */
    IoT_OpenPorts: "IoT_OpenPorts",
    /**
     * An Allowed firewall policy was found (INPUT/OUTPUT). The policy should Deny all traffic by default and define rules to allow necessary communication to/from the device.
     */
    IoT_PermissiveFirewallPolicy: "IoT_PermissiveFirewallPolicy",
    /**
     * A rule in the firewall has been found that contains a permissive pattern for a wide range of IP addresses or Ports.
     */
    IoT_PermissiveInputFirewallRules: "IoT_PermissiveInputFirewallRules",
    /**
     * A rule in the firewall has been found that contains a permissive pattern for a wide range of IP addresses or Ports.
     */
    IoT_PermissiveOutputFirewallRules: "IoT_PermissiveOutputFirewallRules",
    /**
     * Edge module is configured to run in privileged mode, with extensive Linux capabilities or with host-level network access (send/receive data to host machine).
     */
    IoT_PrivilegedDockerOptions: "IoT_PrivilegedDockerOptions",
    /**
     * Same authentication credentials to the IoT Hub used by multiple devices. This could indicate an illegitimate device impersonating a legitimate device. It also exposes the risk of device impersonation by an attacker.
     */
    IoT_SharedCredentials: "IoT_SharedCredentials",
    /**
     * Insecure TLS configurations detected. Immediate upgrade recommended.
     */
    IoT_VulnerableTLSCipherSuite: "IoT_VulnerableTLSCipherSuite",
};
exports.Roles = {
    /**
     * If enabled, send notification on new alerts to the account admins
     */
    AccountAdmin: "AccountAdmin",
    /**
     * If enabled, send notification on new alerts to the service admins
     */
    ServiceAdmin: "ServiceAdmin",
    /**
     * If enabled, send notification on new alerts to the subscription owners
     */
    Owner: "Owner",
    /**
     * If enabled, send notification on new alerts to the subscription contributors
     */
    Contributor: "Contributor",
};
exports.RuleState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
    Expired: "Expired",
};
exports.ScanningMode = {
    Default: "Default",
};
exports.SecuritySolutionStatus = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.ServerVulnerabilityAssessmentsAzureSettingSelectedProvider = {
    /**
     * Microsoft Defender for Endpoints threat and vulnerability management.
     */
    MdeTvm: "MdeTvm",
};
exports.ServerVulnerabilityAssessmentsSettingKind = {
    AzureServersSetting: "AzureServersSetting",
};
exports.Severity = {
    Low: "Low",
    Medium: "Medium",
    High: "High",
};
exports.SeverityEnum = {
    High: "High",
    Medium: "Medium",
    Low: "Low",
};
exports.Source = {
    /**
     * Resource is in Azure
     */
    Azure: "Azure",
    /**
     * Resource in an on premise machine connected to Azure cloud
     */
    OnPremise: "OnPremise",
    /**
     * SQL Resource in an on premise machine connected to Azure cloud
     */
    OnPremiseSql: "OnPremiseSql",
};
exports.StandardSupportedClouds = {
    AWS: "AWS",
    GCP: "GCP",
};
exports.State = {
    /**
     * Send notification on new alerts to the subscription's admins
     */
    On: "On",
    /**
     * Don't send notification on new alerts to the subscription's admins
     */
    Off: "Off",
};
exports.Status = {
    Revoked: "Revoked",
    Initiated: "Initiated",
};
exports.StatusReason = {
    Expired: "Expired",
    UserRequested: "UserRequested",
    NewerRequestInitiated: "NewerRequestInitiated",
};
exports.SubPlan = {
    P1: "P1",
    P2: "P2",
};
exports.SupportedCloudEnum = {
    AWS: "AWS",
    GCP: "GCP",
};
exports.Tactics = {
    Reconnaissance: "Reconnaissance",
    Resource_Development: "Resource Development",
    Initial_Access: "Initial Access",
    Execution: "Execution",
    Persistence: "Persistence",
    Privilege_Escalation: "Privilege Escalation",
    Defense_Evasion: "Defense Evasion",
    Credential_Access: "Credential Access",
    Discovery: "Discovery",
    Lateral_Movement: "Lateral Movement",
    Collection: "Collection",
    Command_and_Control: "Command and Control",
    Exfiltration: "Exfiltration",
    Impact: "Impact",
};
exports.Techniques = {
    Abuse_Elevation_Control_Mechanism: "Abuse Elevation Control Mechanism",
    Access_Token_Manipulation: "Access Token Manipulation",
    Account_Discovery: "Account Discovery",
    Account_Manipulation: "Account Manipulation",
    Active_Scanning: "Active Scanning",
    Application_Layer_Protocol: "Application Layer Protocol",
    Audio_Capture: "Audio Capture",
    Boot_or_Logon_Autostart_Execution: "Boot or Logon Autostart Execution",
    Boot_or_Logon_Initialization_Scripts: "Boot or Logon Initialization Scripts",
    Brute_Force: "Brute Force",
    Cloud_Infrastructure_Discovery: "Cloud Infrastructure Discovery",
    Cloud_Service_Dashboard: "Cloud Service Dashboard",
    Cloud_Service_Discovery: "Cloud Service Discovery",
    Command_and_Scripting_Interpreter: "Command and Scripting Interpreter",
    Compromise_Client_Software_Binary: "Compromise Client Software Binary",
    Compromise_Infrastructure: "Compromise Infrastructure",
    Container_and_Resource_Discovery: "Container and Resource Discovery",
    Create_Account: "Create Account",
    Create_or_Modify_System_Process: "Create or Modify System Process",
    Credentials_from_Password_Stores: "Credentials from Password Stores",
    Data_Destruction: "Data Destruction",
    Data_Encrypted_for_Impact: "Data Encrypted for Impact",
    Data_from_Cloud_Storage_Object: "Data from Cloud Storage Object",
    Data_from_Configuration_Repository: "Data from Configuration Repository",
    Data_from_Information_Repositories: "Data from Information Repositories",
    Data_from_Local_System: "Data from Local System",
    Data_Manipulation: "Data Manipulation",
    Data_Staged: "Data Staged",
    Defacement: "Defacement",
    Deobfuscate_Decode_Files_or_Information: "Deobfuscate/Decode Files or Information",
    Disk_Wipe: "Disk Wipe",
    Domain_Trust_Discovery: "Domain Trust Discovery",
    Drive_by_Compromise: "Drive-by Compromise",
    Dynamic_Resolution: "Dynamic Resolution",
    Endpoint_Denial_of_Service: "Endpoint Denial of Service",
    Event_Triggered_Execution: "Event Triggered Execution",
    Exfiltration_Over_Alternative_Protocol: "Exfiltration Over Alternative Protocol",
    Exploit_Public_Facing_Application: "Exploit Public-Facing Application",
    Exploitation_for_Client_Execution: "Exploitation for Client Execution",
    Exploitation_for_Credential_Access: "Exploitation for Credential Access",
    Exploitation_for_Defense_Evasion: "Exploitation for Defense Evasion",
    Exploitation_for_Privilege_Escalation: "Exploitation for Privilege Escalation",
    Exploitation_of_Remote_Services: "Exploitation of Remote Services",
    External_Remote_Services: "External Remote Services",
    Fallback_Channels: "Fallback Channels",
    File_and_Directory_Discovery: "File and Directory Discovery",
    Gather_Victim_Network_Information: "Gather Victim Network Information",
    Hide_Artifacts: "Hide Artifacts",
    Hijack_Execution_Flow: "Hijack Execution Flow",
    Impair_Defenses: "Impair Defenses",
    Implant_Container_Image: "Implant Container Image",
    Indicator_Removal_on_Host: "Indicator Removal on Host",
    Indirect_Command_Execution: "Indirect Command Execution",
    Ingress_Tool_Transfer: "Ingress Tool Transfer",
    Input_Capture: "Input Capture",
    Inter_Process_Communication: "Inter-Process Communication",
    Lateral_Tool_Transfer: "Lateral Tool Transfer",
    Man_in_the_Middle: "Man-in-the-Middle",
    Masquerading: "Masquerading",
    Modify_Authentication_Process: "Modify Authentication Process",
    Modify_Registry: "Modify Registry",
    Network_Denial_of_Service: "Network Denial of Service",
    Network_Service_Scanning: "Network Service Scanning",
    Network_Sniffing: "Network Sniffing",
    Non_Application_Layer_Protocol: "Non-Application Layer Protocol",
    Non_Standard_Port: "Non-Standard Port",
    Obtain_Capabilities: "Obtain Capabilities",
    Obfuscated_Files_or_Information: "Obfuscated Files or Information",
    Office_Application_Startup: "Office Application Startup",
    OS_Credential_Dumping: "OS Credential Dumping",
    Permission_Groups_Discovery: "Permission Groups Discovery",
    Phishing: "Phishing",
    Pre_OS_Boot: "Pre-OS Boot",
    Process_Discovery: "Process Discovery",
    Process_Injection: "Process Injection",
    Protocol_Tunneling: "Protocol Tunneling",
    Proxy: "Proxy",
    Query_Registry: "Query Registry",
    Remote_Access_Software: "Remote Access Software",
    Remote_Service_Session_Hijacking: "Remote Service Session Hijacking",
    Remote_Services: "Remote Services",
    Remote_System_Discovery: "Remote System Discovery",
    Resource_Hijacking: "Resource Hijacking",
    Scheduled_Task_Job: "Scheduled Task/Job",
    Screen_Capture: "Screen Capture",
    Search_Victim_Owned_Websites: "Search Victim-Owned Websites",
    Server_Software_Component: "Server Software Component",
    Service_Stop: "Service Stop",
    Signed_Binary_Proxy_Execution: "Signed Binary Proxy Execution",
    Software_Deployment_Tools: "Software Deployment Tools",
    SQL_Stored_Procedures: "SQL Stored Procedures",
    Steal_or_Forge_Kerberos_Tickets: "Steal or Forge Kerberos Tickets",
    Subvert_Trust_Controls: "Subvert Trust Controls",
    Supply_Chain_Compromise: "Supply Chain Compromise",
    System_Information_Discovery: "System Information Discovery",
    Taint_Shared_Content: "Taint Shared Content",
    Traffic_Signaling: "Traffic Signaling",
    Transfer_Data_to_Cloud_Account: "Transfer Data to Cloud Account",
    Trusted_Relationship: "Trusted Relationship",
    Unsecured_Credentials: "Unsecured Credentials",
    User_Execution: "User Execution",
    Valid_Accounts: "Valid Accounts",
    Windows_Management_Instrumentation: "Windows Management Instrumentation",
    File_and_Directory_Permissions_Modification: "File and Directory Permissions Modification",
};
exports.Threats = {
    AccountBreach: "accountBreach",
    DataExfiltration: "dataExfiltration",
    DataSpillage: "dataSpillage",
    MaliciousInsider: "maliciousInsider",
    ElevationOfPrivilege: "elevationOfPrivilege",
    ThreatResistance: "threatResistance",
    MissingCoverage: "missingCoverage",
    DenialOfService: "denialOfService",
};
exports.Type = {
    Qualys: "Qualys",
    TVM: "TVM",
};
exports.UnmaskedIpLoggingStatus = {
    /**
     * Unmasked IP logging is disabled
     */
    Disabled: "Disabled",
    /**
     * Unmasked IP logging is enabled
     */
    Enabled: "Enabled",
};
exports.UserImpact = {
    Low: "Low",
    Moderate: "Moderate",
    High: "High",
};
//# sourceMappingURL=data:application/json;base64,