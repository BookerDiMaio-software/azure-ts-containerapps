"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAPICollectionByAzureApiManagementServiceOutput = exports.getAPICollectionByAzureApiManagementService = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Gets an Azure API Management API if it has been onboarded to Microsoft Defender for APIs. If an Azure API Management API is onboarded to Microsoft Defender for APIs, the system will monitor the operations within the Azure API Management API for intrusive behaviors and provide alerts for attacks that have been detected.
 */
function getAPICollectionByAzureApiManagementService(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure-native:security/v20231115:getAPICollectionByAzureApiManagementService", {
        "apiId": args.apiId,
        "resourceGroupName": args.resourceGroupName,
        "serviceName": args.serviceName,
    }, opts);
}
exports.getAPICollectionByAzureApiManagementService = getAPICollectionByAzureApiManagementService;
/**
 * Gets an Azure API Management API if it has been onboarded to Microsoft Defender for APIs. If an Azure API Management API is onboarded to Microsoft Defender for APIs, the system will monitor the operations within the Azure API Management API for intrusive behaviors and provide alerts for attacks that have been detected.
 */
function getAPICollectionByAzureApiManagementServiceOutput(args, opts) {
    return pulumi.output(args).apply((a) => getAPICollectionByAzureApiManagementService(a, opts));
}
exports.getAPICollectionByAzureApiManagementServiceOutput = getAPICollectionByAzureApiManagementServiceOutput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0QVBJQ29sbGVjdGlvbkJ5QXp1cmVBcGlNYW5hZ2VtZW50U2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlY3VyaXR5L3YyMDIzMTExNS9nZXRBUElDb2xsZWN0aW9uQnlBenVyZUFwaU1hbmFnZW1lbnRTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzRUFBc0U7QUFDdEUsaUZBQWlGOzs7QUFFakYseUNBQXlDO0FBQ3pDLDZDQUE2QztBQUU3Qzs7R0FFRztBQUNILFNBQWdCLDJDQUEyQyxDQUFDLElBQXFELEVBQUUsSUFBMkI7SUFFMUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLG9CQUFvQixFQUFFLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3pFLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsNkVBQTZFLEVBQUU7UUFDeEcsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLO1FBQ25CLG1CQUFtQixFQUFFLElBQUksQ0FBQyxpQkFBaUI7UUFDM0MsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXO0tBQ2xDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDYixDQUFDO0FBUkQsa0dBUUM7QUEwRUQ7O0dBRUc7QUFDSCxTQUFnQixpREFBaUQsQ0FBQyxJQUEyRCxFQUFFLElBQTJCO0lBQ3RKLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLDJDQUEyQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQ3RHLENBQUM7QUFGRCw4R0FFQyJ9